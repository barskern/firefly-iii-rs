/*
 * Firefly III API v1.5.5
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-01-30T05:47:28+00:00 
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: james@firefly-iii.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BillUpdate {
    /// Use either currency_id or currency_code
    #[serde(rename = "currency_id", skip_serializing_if = "Option::is_none")]
    pub currency_id: Option<String>,
    /// Use either currency_id or currency_code
    #[serde(rename = "currency_code", skip_serializing_if = "Option::is_none")]
    pub currency_code: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "amount_min", skip_serializing_if = "Option::is_none")]
    pub amount_min: Option<String>,
    #[serde(rename = "amount_max", skip_serializing_if = "Option::is_none")]
    pub amount_max: Option<String>,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// The date after which this bill is no longer valid or applicable
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// The date before which the bill must be renewed (or cancelled)
    #[serde(rename = "extension_date", skip_serializing_if = "Option::is_none")]
    pub extension_date: Option<String>,
    #[serde(rename = "repeat_freq", skip_serializing_if = "Option::is_none")]
    pub repeat_freq: Option<crate::models::BillRepeatFrequency>,
    /// How often the bill must be skipped. 1 means a bi-monthly bill.
    #[serde(rename = "skip", skip_serializing_if = "Option::is_none")]
    pub skip: Option<i32>,
    /// If the bill is active.
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    /// The group ID of the group this object is part of. NULL if no group.
    #[serde(rename = "object_group_id", skip_serializing_if = "Option::is_none")]
    pub object_group_id: Option<String>,
    /// The name of the group. NULL if no group.
    #[serde(rename = "object_group_title", skip_serializing_if = "Option::is_none")]
    pub object_group_title: Option<String>,
}

impl BillUpdate {
    pub fn new() -> BillUpdate {
        BillUpdate {
            currency_id: None,
            currency_code: None,
            name: None,
            amount_min: None,
            amount_max: None,
            date: None,
            end_date: None,
            extension_date: None,
            repeat_freq: None,
            skip: None,
            active: None,
            notes: None,
            object_group_id: None,
            object_group_title: None,
        }
    }
}


