/*
 * Firefly III API v1.5.5
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-01-30T05:47:28+00:00 
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: james@firefly-iii.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecurrenceTransaction {
    #[serde(rename = "description")]
    pub description: String,
    /// Amount of the transaction.
    #[serde(rename = "amount")]
    pub amount: String,
    /// Foreign amount of the transaction.
    #[serde(rename = "foreign_amount", skip_serializing_if = "Option::is_none")]
    pub foreign_amount: Option<String>,
    /// Submit either a currency_id or a currency_code.
    #[serde(rename = "currency_id", skip_serializing_if = "Option::is_none")]
    pub currency_id: Option<String>,
    /// Submit either a currency_id or a currency_code.
    #[serde(rename = "currency_code", skip_serializing_if = "Option::is_none")]
    pub currency_code: Option<String>,
    #[serde(rename = "currency_symbol", skip_serializing_if = "Option::is_none")]
    pub currency_symbol: Option<String>,
    /// Number of decimals in the currency
    #[serde(rename = "currency_decimal_places", skip_serializing_if = "Option::is_none")]
    pub currency_decimal_places: Option<i32>,
    /// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
    #[serde(rename = "foreign_currency_id", skip_serializing_if = "Option::is_none")]
    pub foreign_currency_id: Option<String>,
    /// Submit either a foreign_currency_id or a foreign_currency_code, or neither.
    #[serde(rename = "foreign_currency_code", skip_serializing_if = "Option::is_none")]
    pub foreign_currency_code: Option<String>,
    #[serde(rename = "foreign_currency_symbol", skip_serializing_if = "Option::is_none")]
    pub foreign_currency_symbol: Option<String>,
    /// Number of decimals in the currency
    #[serde(rename = "foreign_currency_decimal_places", skip_serializing_if = "Option::is_none")]
    pub foreign_currency_decimal_places: Option<i32>,
    /// The budget ID for this transaction.
    #[serde(rename = "budget_id", skip_serializing_if = "Option::is_none")]
    pub budget_id: Option<String>,
    /// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
    #[serde(rename = "budget_name", skip_serializing_if = "Option::is_none")]
    pub budget_name: Option<String>,
    /// Category ID for this transaction.
    #[serde(rename = "category_id", skip_serializing_if = "Option::is_none")]
    pub category_id: Option<String>,
    /// Category name for this transaction.
    #[serde(rename = "category_name", skip_serializing_if = "Option::is_none")]
    pub category_name: Option<String>,
    /// ID of the source account. Submit either this or source_name.
    #[serde(rename = "source_id", skip_serializing_if = "Option::is_none")]
    pub source_id: Option<String>,
    /// Name of the source account. Submit either this or source_id.
    #[serde(rename = "source_name", skip_serializing_if = "Option::is_none")]
    pub source_name: Option<String>,
    #[serde(rename = "source_iban", skip_serializing_if = "Option::is_none")]
    pub source_iban: Option<String>,
    #[serde(rename = "source_type", skip_serializing_if = "Option::is_none")]
    pub source_type: Option<crate::models::AccountTypeProperty>,
    /// ID of the destination account. Submit either this or destination_name.
    #[serde(rename = "destination_id", skip_serializing_if = "Option::is_none")]
    pub destination_id: Option<String>,
    /// Name of the destination account. Submit either this or destination_id.
    #[serde(rename = "destination_name", skip_serializing_if = "Option::is_none")]
    pub destination_name: Option<String>,
    #[serde(rename = "destination_iban", skip_serializing_if = "Option::is_none")]
    pub destination_iban: Option<String>,
    #[serde(rename = "destination_type", skip_serializing_if = "Option::is_none")]
    pub destination_type: Option<crate::models::AccountTypeProperty>,
    /// Array of tags.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Optional. Use either this or the piggy_bank_name
    #[serde(rename = "piggy_bank_id", skip_serializing_if = "Option::is_none")]
    pub piggy_bank_id: Option<String>,
    /// Optional. Use either this or the piggy_bank_id
    #[serde(rename = "piggy_bank_name", skip_serializing_if = "Option::is_none")]
    pub piggy_bank_name: Option<String>,
}

impl RecurrenceTransaction {
    pub fn new(description: String, amount: String) -> RecurrenceTransaction {
        RecurrenceTransaction {
            description,
            amount,
            foreign_amount: None,
            currency_id: None,
            currency_code: None,
            currency_symbol: None,
            currency_decimal_places: None,
            foreign_currency_id: None,
            foreign_currency_code: None,
            foreign_currency_symbol: None,
            foreign_currency_decimal_places: None,
            budget_id: None,
            budget_name: None,
            category_id: None,
            category_name: None,
            source_id: None,
            source_name: None,
            source_iban: None,
            source_type: None,
            destination_id: None,
            destination_name: None,
            destination_iban: None,
            destination_type: None,
            tags: None,
            piggy_bank_id: None,
            piggy_bank_name: None,
        }
    }
}


