/*
 * Firefly III API v1.5.5
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-01-30T05:47:28+00:00 
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: james@firefly-iii.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct WebhookStore {
    /// Boolean to indicate if the webhook is active
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    /// A title for the webhook for easy recognition.
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "trigger")]
    pub trigger: crate::models::WebhookTrigger,
    #[serde(rename = "response")]
    pub response: crate::models::WebhookResponse,
    #[serde(rename = "delivery")]
    pub delivery: crate::models::WebhookDelivery,
    /// The URL of the webhook. Has to start with `https`.
    #[serde(rename = "url")]
    pub url: String,
}

impl WebhookStore {
    pub fn new(title: String, trigger: crate::models::WebhookTrigger, response: crate::models::WebhookResponse, delivery: crate::models::WebhookDelivery, url: String) -> WebhookStore {
        WebhookStore {
            active: None,
            title,
            trigger,
            response,
            delivery,
            url,
        }
    }
}


