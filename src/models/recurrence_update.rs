/*
 * Firefly III API v1.5.5
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-01-30T05:47:28+00:00 
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: james@firefly-iii.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RecurrenceUpdate {
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Not to be confused with the description of the actual transaction(s) being created.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// First time the recurring transaction will fire.
    #[serde(rename = "first_date", skip_serializing_if = "Option::is_none")]
    pub first_date: Option<String>,
    /// Date until the recurring transaction can fire. After that date, it's basically inactive. Use either this field or repetitions.
    #[serde(rename = "repeat_until", skip_serializing_if = "Option::is_none")]
    pub repeat_until: Option<String>,
    /// Max number of created transactions. Use either this field or repeat_until.
    #[serde(rename = "nr_of_repetitions", skip_serializing_if = "Option::is_none")]
    pub nr_of_repetitions: Option<i32>,
    /// Whether or not to fire the rules after the creation of a transaction.
    #[serde(rename = "apply_rules", skip_serializing_if = "Option::is_none")]
    pub apply_rules: Option<bool>,
    /// If the recurrence is even active.
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "repetitions", skip_serializing_if = "Option::is_none")]
    pub repetitions: Option<Vec<crate::models::RecurrenceRepetitionUpdate>>,
    #[serde(rename = "transactions", skip_serializing_if = "Option::is_none")]
    pub transactions: Option<Vec<crate::models::RecurrenceTransactionUpdate>>,
}

impl RecurrenceUpdate {
    pub fn new() -> RecurrenceUpdate {
        RecurrenceUpdate {
            title: None,
            description: None,
            first_date: None,
            repeat_until: None,
            nr_of_repetitions: None,
            apply_rules: None,
            active: None,
            notes: None,
            repetitions: None,
            transactions: None,
        }
    }
}


