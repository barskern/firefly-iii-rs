/*
 * Firefly III API v1.5.5
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-01-30T05:47:28+00:00 
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: james@firefly-iii.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RuleTriggerStore {
    #[serde(rename = "type")]
    pub _type: crate::models::RuleTriggerKeyword,
    /// The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.
    #[serde(rename = "value")]
    pub value: String,
    /// Order of the trigger
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    /// If the trigger is active. Defaults to true.
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    /// When true, other triggers will not be checked if this trigger was triggered. Defaults to false.
    #[serde(rename = "stop_processing", skip_serializing_if = "Option::is_none")]
    pub stop_processing: Option<bool>,
}

impl RuleTriggerStore {
    pub fn new(_type: crate::models::RuleTriggerKeyword, value: String) -> RuleTriggerStore {
        RuleTriggerStore {
            _type,
            value,
            order: None,
            active: None,
            stop_processing: None,
        }
    }
}


